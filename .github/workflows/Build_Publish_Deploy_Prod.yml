name: Build, Publish Images to ECR
# updated ECR Repo  01/23
on: 
  push:
    branches: [ prod ]

jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

   
    steps:

    - name: Check out code
      uses: actions/checkout@v4

    - name: Setup AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: clo835-assignment1-repository
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        # Docker build command
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:mysql-v$IMAGE_TAG -f Dockerfile_mysql .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:app-v$IMAGE_TAG -f Dockerfile .
        
        # Publish images to ECR 
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:mysql-v$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:app-v$IMAGE_TAG

    - name: Get EC2 Public IP
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.run_number }}
        ECR_REPOSITORY: clo835-assignment1-repository
        DBPASS: ${{ secrets.DBPASS }}
        DBUSER: ${{ secrets.DBUSER }}
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}         
      run: |
        # Get public IP of app_server
        PUBLIC_IP=$(aws ec2 describe-instances --filter "Name=tag:Name, Values=app_server" --query 'Reservations[0].Instances[0].PublicIpAddress' --region us-east-1 --output text)
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.PUBLIC_IP }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: 22
        script: |
          ## Create user-defined network
          docker network create my_app_network || echo "Network already exists"
          ## Run my_db
          docker run -d --name my_db --network my_app_network -e MYSQL_ROOT_PASSWORD=$DBPASS  $ECR_REGISTRY/$ECR_REPOSITORY:mysql-v$IMAGE_TAG
          # Wait for MySQL to be ready
          until docker exec my_db mysqladmin -u root -p$DBPASS ping --silent; do
            echo "Waiting for MySQL connection..."
            sleep 30
          done
          # Setup env variables      
          export DBHOST=$(docker inspect -f '{{.NetworkSettings.Networks.my_app_network.IPAddress}}' my_db)
          export DBPORT=3306
          export DBUSER=$DBUSER
          export DATABASE=employees
          export DBPWD=$DBPASS
          ## Run 3 apps blue, pink and lime
          docker run -d --name my_app_blue --network my_app_network -p 8081:8080  -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e  DBUSER=$DBUSER -e DBPWD=$DBPASS  -e APP_COLOR="blue" $ECR_REGISTRY/$ECR_REPOSITORY:app-v$IMAGE_TAG
          docker run -d --name my_app_pink --network my_app_network -p 8082:8080  -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e  DBUSER=$DBUSER -e DBPWD=$DBPASS  -e APP_COLOR="pink" $ECR_REGISTRY/$ECR_REPOSITORY:app-v$IMAGE_TAG
          docker run -d --name my_app_lime --network my_app_network -p 8083:8080  -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e  DBUSER=$DBUSER -e DBPWD=$DBPASS  -e APP_COLOR="lime" $ECR_REGISTRY/$ECR_REPOSITORY:app-v$IMAGE_TAG
          sleep 15
          docker ps
          ## Test 3 apps 
          curl -I localhost:8081
          curl -I localhost:8082
          curl -I localhost:8083
